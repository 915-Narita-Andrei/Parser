<program>,<declist>,<stmtlist>,<declaration>,<type>,<identifier>,<type1>,<type>,<arraydecl>,<integer_const>,<stmt>,<simplstmt>,<structstmt>,<assignstmt>,<iostmt>,<identifier>,<expression>,<operator1>,<term>,<operator2>,<factor>,<identifier>,<integer_const>,<iostmtparam>,<character_const>,<string_const>,<ifstmt>,<ifelsestmt>,<whilestmt>,<forstmt>,<conditionlist>,<logicoperator>,<condition>,<relation>
bool,char,int,stop,+,-,*,/,//,%,;,read,write,(,),{,},if,else,while,for,&&,||,<,<=,==,!=,>=,> 
<program>
<program>={,<declist>,<stmtlist>,}
<decllist>=<declaration>
<decllist>=<declaration>,;,<decllist>
<declaration>= <type> <identifier>
<type1>= bool | char | int
<arraydecl>= <type1> [ <integer_const> ]
<type>= <type1> | <arraydecl>
<stmtlist>= <stmt> ; | <stmt> ";" <stmtlist>
<stmt>= <simplstmt> | <structstmt> | stop
<simplstmt>= <assignstmt> | <iostmt>
<assignstmt>= <identifier> = <expression>
<operator1>= + | -
<operator2>= * | / | // | %
<expression>= <expression> <operator1> <term> | <term>
<term>= <term> <operator2> <factor> | <factor>
<factor>= ( <expression> ) | <identifier> | <integer_const>
<iostmt>= read  ( <iostmtparam> ) | write ( <iostmtparam> )
<iostmtparam>= <identifier> | <integer_const> | <character_const> | <string_const> 
<structstmt>= <ifstmt> | <ifelsestmt> | <whilestmt> | <forstmt> 
<ifstmt>= if ( <conditionlist> ) { <stmtlist> }
<ifelsestmt>= if ( <conditionlist> ) { <stmtlist> } else <stmtlist>
<whilestmt>= while ( <conditionlist> ) { <stmtlist> }
<forstmt>= for ( <simplstmt>; <conditionlist>; <simplstmt> ) { <stmtlist> }
<logicoperator>= && | ||
<conditionlist>= <condition> <logicoperator> <condition>
<condition>= <expression> <relation> <expression>
<relation>= < | <= | == | != | >= | > 
~



<program> ::= { <declist> <stmtlist> }//done

<decllist> ::= <declaration> | <declaration> ; <decllist>
<declaration> ::= <type> <identifier>
<type1> ::= bool | char | int
<arraydecl> ::= <type1> [ <integer_const> ]
<type> ::= <type1> | <arraydecl>

<stmtlist> ::= <stmt> ; | <stmt> ";" <stmtlist>
<stmt> ::= <simplstmt> | <structstmt> | stop
<simplstmt> ::= <assignstmt> | <iostmt>
<assignstmt> ::= <identifier> = <expression>
<operator1> ::= + | -
<operator2> ::= * | / | // | %
<expression> ::= <expression> <operator1> <term> | <term>
<term> ::= <term> <operator2> <factor> | <factor>
<factor> ::= ( <expression> ) | <identifier> | <integer_const>
<iostmt> ::= read  ( <iostmtparam> ) | write ( <iostmtparam> )
<iostmtparam> ::= <identifier> | <integer_const> | <character_const> | <string_const> 
<structstmt> ::= <ifstmt> | <ifelsestmt> | <whilestmt> | <forstmt> 
<ifstmt> ::= if ( <conditionlist> ) { <stmtlist> }
<ifelsestmt> ::= if ( <conditionlist> ) { <stmtlist> } else <stmtlist>
<whilestmt> ::= while ( <conditionlist> ) { <stmtlist> }
<forstmt> ::= for ( <simplstmt>; <conditionlist>; <simplstmt> ) { <stmtlist> }
<logicoperator> ::= && | ||
<conditionlist> ::= <condition> <logicoperator> <condition>
<condition> ::= <expression> <relation> <expression>
<relation> ::= < | <= | == | != | >= | > 